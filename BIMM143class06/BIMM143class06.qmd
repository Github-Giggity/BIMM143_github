---
title: "Class 06: R FUnctions"
author: A15827934
format: pdf
---

# All about functions in R

Functions are the way we get stuff done in R. We call a function to read data, compute, plot stuff, etc. 

R makes writing functions accesible we should always start by trying to get a working snippet of code first before we write out function. 

##Todays Lab

We will grade a whole class of student assignments. We will always try to start with a simplified version of the problem. 

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

mean(student1)

```

If we want the average we can use the `mean()` function

```{r}
mean(student1)
```

Let's be super nice instructors and drop the lowest score so the answer here should be 100. 

I can use the `min()` function to find the lowest value

```{r}
min(student1)

```
I found the `which.min()` function that may be usefdul here. How does it work? Let's just try it: 
```{r}
student1
which.min(student1)
```

```{r}
student1[8]
student1[which.min(student1)]
```
```{r}
student1[1:7]
##I can use the minus syntax trick to get 
##everything but the element with the min value. 
student1[-8]
```

```{r}
##you cannot do [-8] [1:7] because 
##every student may not have a lowest score 
##at the very end if that makes sense. 
##So good idea to use which.min always as a placeholder


student1[-which.min(student1)]
mean(student1[-which.min(student1)])

## I have my first working snippet of code 

```
Let's test on the other students

```{r}
student2
mean(student2[-which.min(student2)])

```

This gives you N/A. where is the problem??

```{r}
mean(student2)
mean(student2, na.rm=TRUE)

```
oh it is the `mean()` with NA input returns NA by default but I can change

```{r}
student3
mean(student3)
```


```{r}
mean(student3, na.rm=TRUE)

```

NO bueno. We need to fix this. 

I want to stop working with `student1`, `student2` etc and typing it out every time so let instead work with an input called `x`

```{r}

x<-student2
x

```
We want to overwrite the NA values with zero - if you miss a hw you score zero on this hw. 

ChatGPT and Claude told me about the `is.na()` function. Lets see how it works
```{r}
x
is.na(x)
x[is.na(x)]
```
We can use logicals to index a vector

```{r}
y<- 1:5
y
y>3
y[y>3]
y[y>3]<- 100

```


```{r}
x[is.na(x)]<- 0
x
mean(x[-which.min(x)])
mean(x)

## it seems that mean(x[-which.min(x)]) 
##is the correct one that we want as 
##it ignores the lowest score 
##(which in this case is now zero)
## We want to drop lowest score and get the mean


a<-student1
a
is.na(a)
a[is.na(a)]<- 0
a
mean(a[-which.min(a)])

b<-student3
b
is.na(b)
sum(is.na(b))
b[is.na(b)]<-0
```


```{r}
#Mask NA values to zero
x<-student3
x[is.na(x)]<- 0
x
#Drop lowest score and get the mean
mean(x[-which.min(x)])

```
This is my working snippet of code that solves the problem for all my example student inputs 


> Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
grade<-function(x){
  
  #Mask NA values to zero
x[is.na(x)]<- 0

#Drop lowest score and get the mean
mean(x[-which.min(x)])
  
}
```

Use this function:
```{r}
grade(student1)
grade(student2)
grade(student3)


```

We need to read the gradebook

```{r}
gradebook<-read.csv("https://tinyurl.com/gradeinput", row.names=1)
gradebook
```

I can use the `apply()` function if I figure out how to use the thing
```{r}
finalgrade<-apply(gradebook,1, grade)
finalgrade

apply(gradebook,2,grade)

```
>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
which.max(finalgrade)
##here you would use the apply name not the function
##name grade as function name grade is inside apply
```
>Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall?



We could calculate the `mean()` score for each homework
```{r}
apply(gradebook,2,mean)
apply(gradebook,2,grade)

```
Weird there are some NA. When you do mean. 
When you do grade function it says HW2

```{r}
##we gonna make into name file because
##we do not want to mess with the original gradebook
mask<-gradebook

mask[is.na(mask)]<- 0
hw.avg<-apply(mask,2,mean)
hw.avg
which.min(hw.avg)

```

```{r}
apply(gradebook,2,mean,na.rm=T)
```
DIfferent answer interesting

We could use sum
```{r}
apply(gradebook,2,sum, na.rm=T)
```
# Either 2 or 3 depending on what you did. So when you turned NA into 0 you have lower average than when you just ignore or remove NA. The latter would have higher average. 

>Q4. Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
mask$hw2
cor(mask$hw2, finalgrade)
cor(mask$hw5, finalgrade)
cor(mask$hw1, finalgrade)
cor(mask$hw3, finalgrade)
cor(mask$hw4, finalgrade)

```
```{r}
apply(mask,2,cor, y=finalgrade)
```

```{r}
which.max(apply(mask,2,cor, y=finalgrade)
)
```

